<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CppAst</name>
    </assembly>
    <members>
        <member name="T:CppAst.CppArrayType">
            <summary>
            A C++ array (e.g int[5] or int[])
            </summary>
        </member>
        <member name="M:CppAst.CppArrayType.#ctor(CppAst.CppType,System.Int32)">
            <summary>
            Constructor of a C++ array.
            </summary>
            <param name="elementType">The element type (e.g `int`)</param>
            <param name="size">The size of the array. 0 means an unbound array</param>
        </member>
        <member name="P:CppAst.CppArrayType.Size">
            <summary>
            Gets the size of the array.
            </summary>
        </member>
        <member name="T:CppAst.CppAttribute">
            <summary>
            An attached C++ attribute
            </summary>
        </member>
        <member name="P:CppAst.CppAttribute.Scope">
            <summary>
            Gets or sets the scope of this attribute
            </summary>
        </member>
        <member name="P:CppAst.CppAttribute.Name">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="P:CppAst.CppAttribute.Arguments">
            <summary>
            Gets the attribute arguments
            </summary>
        </member>
        <member name="P:CppAst.CppAttribute.IsVariadic">
            <summary>
            Gets a boolean indicating whether this attribute is variadic
            </summary>
        </member>
        <member name="M:CppAst.CppAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.AttributeKind">
            <summary>
            Attribute kind enum here
            </summary>
        </member>
        <member name="T:CppAst.CppBaseType">
            <summary>
            A C++ base type used by <see cref="P:CppAst.CppClass.BaseTypes"/>
            </summary>
        </member>
        <member name="M:CppAst.CppBaseType.#ctor(CppAst.CppType)">
            <summary>
            Creates a base type.
            </summary>
            <param name="baseType">Type of the base</param>
        </member>
        <member name="P:CppAst.CppBaseType.Visibility">
            <summary>
            Gets or sets the visibility of this type.
            </summary>
        </member>
        <member name="P:CppAst.CppBaseType.IsVirtual">
            <summary>
            Gets or sets if this element is virtual.
            </summary>
        </member>
        <member name="P:CppAst.CppBaseType.Type">
            <summary>
            Gets the C++ type associated.
            </summary>
        </member>
        <member name="M:CppAst.CppBaseType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppCallingConvention">
            <summary>
            The calling function of a <see cref="T:CppAst.CppFunction"/> or <see cref="T:CppAst.CppFunctionType"/>
            </summary>
        </member>
        <member name="T:CppAst.CppClass">
            <summary>
            A C++ class, struct or union.
            </summary>
        </member>
        <member name="M:CppAst.CppClass.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">Name of this type.</param>
        </member>
        <member name="P:CppAst.CppClass.ClassKind">
            <summary>
            Kind of the instance (`class` `struct` or `union`)
            </summary>
        </member>
        <member name="P:CppAst.CppClass.Name">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Visibility">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Attributes">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.IsDefinition">
            <summary>
            Gets or sets a boolean indicating if this type is a definition. If <c>false</c> the type was only declared but is not defined.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.IsAnonymous">
            <summary>
            Gets or sets a boolean indicating if this declaration is anonymous.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.BaseTypes">
            <summary>
            Get the base types of this type.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.Fields">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Constructors">
            <summary>
            Gets the constructors of this instance.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.Destructors">
            <summary>
            Gets the destructors of this instance.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.Functions">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Enums">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Classes">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.Typedefs">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.TemplateParameters">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.SpecializedTemplate">
            <summary>
            Gets the specialized class template of this instance.
            </summary>
        </member>
        <member name="P:CppAst.CppClass.SizeOf">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppClass.AlignOf">
            <summary>
            Gets the alignment of this instance.
            </summary>
        </member>
        <member name="M:CppAst.CppClass.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppClass.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppClass.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppClass.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppClassKind">
            <summary>
            Type of a <see cref="T:CppAst.CppClass"/> (class, struct or union)
            </summary>
        </member>
        <member name="F:CppAst.CppClassKind.Class">
            <summary>
            A C++ `class`
            </summary>
        </member>
        <member name="F:CppAst.CppClassKind.Struct">
            <summary>
            A C++ `struct`
            </summary>
        </member>
        <member name="F:CppAst.CppClassKind.Union">
            <summary>
            A C++ `union`
            </summary>
        </member>
        <member name="T:CppAst.CppCommentFull">
            <summary>
            Top level comment container.
            </summary>
        </member>
        <member name="M:CppAst.CppCommentFull.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppComment">
            <summary>
            Base class for all comments.
            </summary>
        </member>
        <member name="P:CppAst.CppComment.Kind">
            <summary>
            The kind of comments.
            </summary>
        </member>
        <member name="P:CppAst.CppComment.Children">
            <summary>
            Gets a list of children. Might be null.
            </summary>
        </member>
        <member name="M:CppAst.CppComment.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppCommentCommand">
            <summary>
            A comment that is a command (e.g `@param arg1`)
            </summary>
        </member>
        <member name="T:CppAst.CppCommentParagraph">
            <summary>
            A comment paragraph.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentBlockCommand">
            <summary>
            A comment block command (`@code ... @endcode`)
            </summary>
        </member>
        <member name="T:CppAst.CppCommentInlineCommand">
            <summary>
            An inline comment command.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentInlineCommandRenderKind">
            <summary>
            Type of rendering for an <see cref="T:CppAst.CppCommentInlineCommand"/>
            </summary>
        </member>
        <member name="T:CppAst.CppCommentParamCommand">
            <summary>
            A comment for a function/method parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentParamCommand.ParamName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentParamCommand.IsParamIndexValid">
            <summary>
            Gets or sets a boolean indicating if the <see cref="P:CppAst.CppCommentParamCommand.ParamIndex"/> is valid.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentParamCommand.ParamIndex">
            <summary>
            Gets or sets the index of this parameter in the function parameters.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentParamCommand.Direction">
            <summary>
            Gets or sets the direction of this parameter (in, out, inout).
            </summary>
        </member>
        <member name="P:CppAst.CppCommentParamCommand.IsDirectionExplicit">
            <summary>
            Gets or sets a boolean indicating if <see cref="P:CppAst.CppCommentParamCommand.Direction"/> was explicitly specified.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentTemplateParamCommand">
            <summary>
            A comment for a template parameter command.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentTemplateParamCommand.ParamName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentTemplateParamCommand.Depth">
            <summary>
            Depth or this parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentTemplateParamCommand.IsPositionValid">
            <summary>
            Gets or sets a boolean indicating if this <see cref="P:CppAst.CppCommentTemplateParamCommand.Index"/> is valid
            </summary>
        </member>
        <member name="P:CppAst.CppCommentTemplateParamCommand.Index">
            <summary>
            Gets or sets the index of this template parameter.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentParamDirection">
            <summary>
            Direction used by <see cref="T:CppAst.CppCommentParamCommand"/>
            </summary>
        </member>
        <member name="T:CppAst.CppCommentKind">
            <summary>
            An enumeration for <see cref="T:CppAst.CppComment"/>
            </summary>
        </member>
        <member name="T:CppAst.CppCommentVerbatimBlockCommand">
            <summary>
            A comment for a verbatim block command.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentVerbatimBlockLine">
            <summary>
            A comment for a verbatim line inside a verbatim block.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentTextBase">
            <summary>
            Base class for all text based comments.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentText">
            <summary>
            A simple text comment entry.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentVerbatimLine">
            <summary>
            A verbatim line comment.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentHtmlTag">
            <summary>
            Base class for an HTML comment start or en tag.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentHtmlStartTag">
            <summary>
            An HTML start comment tag.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentHtmlStartTag.IsSelfClosing">
            <summary>
            Gets or sets a boolean indicating if this start tag is self closing.
            </summary>
        </member>
        <member name="P:CppAst.CppCommentHtmlStartTag.Attributes">
            <summary>
            Gets the list of HTML attributes attached to this start tag.
            </summary>
        </member>
        <member name="T:CppAst.CppCommentHtmlEndTag">
            <summary>
            An HTML end comment tag.
            </summary>
        </member>
        <member name="T:CppAst.CppCompilation">
            <summary>
            The result of a compilation for a sets of C++ files.
            </summary>
        </member>
        <member name="M:CppAst.CppCompilation.#ctor">
            <summary>
            Constructor of this object.
            </summary>
        </member>
        <member name="P:CppAst.CppCompilation.Diagnostics">
            <summary>
            Gets the attached diagnostic messages.
            </summary>
        </member>
        <member name="P:CppAst.CppCompilation.InputText">
            <summary>
            Gets the final input header text used by this compilation.
            </summary>
        </member>
        <member name="P:CppAst.CppCompilation.HasErrors">
            <summary>
            Gets a boolean indicating whether this instance has errors. See <see cref="P:CppAst.CppCompilation.Diagnostics"/> for more details.
            </summary>
        </member>
        <member name="P:CppAst.CppCompilation.System">
            <summary>
            Gets all the declarations that are coming from system include folders used by the declarations in this object.
            </summary>
        </member>
        <member name="T:CppAst.CppContainerHelper">
            <summary>
            Internal helper class for visiting children
            </summary>
        </member>
        <member name="T:CppAst.CppContainerList`1">
            <summary>
            A generic list of <see cref="T:CppAst.CppElement"/> hold by a <see cref="T:CppAst.ICppContainer"/>
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="P:CppAst.CppContainerList`1.Container">
            <summary>
            Gets the container this list is attached to.
            </summary>
        </member>
        <member name="M:CppAst.CppContainerList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppContainerList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppContainerList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppContainerList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppContainerList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppDeclaration">
            <summary>
            Base class for any declaration that is not a type (<see cref="T:CppAst.CppTypeDeclaration"/>)
            </summary>
        </member>
        <member name="P:CppAst.CppDeclaration.Comment">
            <summary>
            Gets or sets the comment attached to this element. Might be null.
            </summary>
        </member>
        <member name="M:CppAst.CppDiagnosticBag.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppDiagnosticMessage">
            <summary>
            Provides a diagnostic message for a specific location in the source code.
            </summary>
        </member>
        <member name="M:CppAst.CppDiagnosticMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppElement">
            <summary>
            Base class for all Cpp elements of the AST nodes.
            </summary>
        </member>
        <member name="F:CppAst.CppElement.Span">
            <summary>
            Gets or sets the source span of this element.
            </summary>
        </member>
        <member name="P:CppAst.CppElement.Parent">
            <summary>
            Gets or sets the parent container of this element. Might be null.
            </summary>
        </member>
        <member name="P:CppAst.CppElement.SourceFile">
            <summary>
            Gets the source file of this element.
            </summary>
        </member>
        <member name="T:CppAst.CppEnum">
            <summary>
            A C++ standard or scoped enum.
            </summary>
        </member>
        <member name="M:CppAst.CppEnum.#ctor(System.String)">
            <summary>
            Creates a new instance of this enum.
            </summary>
            <param name="name">Name of this enum</param>
        </member>
        <member name="P:CppAst.CppEnum.Visibility">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppEnum.Name">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppEnum.IsScoped">
            <summary>
            Gets or sets a boolean indicating if this enum is scoped.
            </summary>
        </member>
        <member name="P:CppAst.CppEnum.IntegerType">
            <summary>
            Gets or sets the underlying integer type of this enum.
            </summary>
        </member>
        <member name="P:CppAst.CppEnum.Items">
            <summary>
            Gets the definition of the enum items.
            </summary>
        </member>
        <member name="P:CppAst.CppEnum.Attributes">
            <summary>
            Gets the list of attached attributes.
            </summary>
        </member>
        <member name="P:CppAst.CppEnum.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnum.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnum.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnum.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnum.Children">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnum.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppEnumItem">
            <summary>
            An enum item of <see cref="T:CppAst.CppEnum"/>.
            </summary>
        </member>
        <member name="M:CppAst.CppEnumItem.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new instance of this enum item.
            </summary>
            <param name="name">Name of the enum item.</param>
            <param name="value">Associated value of this enum item.</param>
        </member>
        <member name="P:CppAst.CppEnumItem.Name">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppEnumItem.Value">
            <summary>
            Gets the value of this enum item.
            </summary>
        </member>
        <member name="P:CppAst.CppEnumItem.ValueExpression">
            <summary>
            Gets the value of this enum item as an expression.
            </summary>
        </member>
        <member name="P:CppAst.CppEnumItem.Attributes">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppEnumItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppExpression">
            <summary>
            Base class for expressions used in <see cref="P:CppAst.CppField.InitExpression"/> and <see cref="P:CppAst.CppParameter.InitExpression"/>
            </summary>
        </member>
        <member name="P:CppAst.CppExpression.Kind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:CppAst.CppExpression.Arguments">
            <summary>
            Gets the arguments of this expression. Might be null.
            </summary>
        </member>
        <member name="M:CppAst.CppExpression.AddArgument(CppAst.CppExpression)">
            <summary>
            Adds an argument to this expression.
            </summary>
            <param name="arg">An argument</param>
        </member>
        <member name="T:CppAst.CppRawExpression">
            <summary>
            An expression that is not exposed in details but only through a list of <see cref="T:CppAst.CppToken"/>
            and a textual representation
            </summary>
        </member>
        <member name="P:CppAst.CppRawExpression.Tokens">
            <summary>
            Gets the tokens associated to this raw expression.
            </summary>
        </member>
        <member name="P:CppAst.CppRawExpression.Text">
            <summary>
            Gets or sets a textual representation from the tokens.
            </summary>
        </member>
        <member name="M:CppAst.CppRawExpression.UpdateTextFromTokens">
            <summary>
            Update the <see cref="P:CppAst.CppRawExpression.Text"/> representation from the <see cref="P:CppAst.CppRawExpression.Tokens"/>.
            </summary>
        </member>
        <member name="M:CppAst.CppRawExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppInitListExpression">
            <summary>
            A C++ Init list expression `{ a, b, c }`
            </summary>
        </member>
        <member name="T:CppAst.CppBinaryExpression">
            <summary>
            A binary expression
            </summary>
        </member>
        <member name="P:CppAst.CppBinaryExpression.Operator">
            <summary>
            The binary operator as a string.
            </summary>
        </member>
        <member name="M:CppAst.CppBinaryExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppUnaryExpression">
            <summary>
            A unary expression.
            </summary>
        </member>
        <member name="P:CppAst.CppUnaryExpression.Operator">
            <summary>
            The unary operator as a string.
            </summary>
        </member>
        <member name="M:CppAst.CppUnaryExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppParenExpression">
            <summary>
            An expression surrounding another expression by parenthesis.
            </summary>
        </member>
        <member name="M:CppAst.CppParenExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppLiteralExpression">
            <summary>
            A literal expression.
            </summary>
        </member>
        <member name="P:CppAst.CppLiteralExpression.Value">
            <summary>
            A textual representation of the literal value.
            </summary>
        </member>
        <member name="M:CppAst.CppLiteralExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppExtensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:CppAst.CppExtensions.IsIdentifierOrKeyword(CppAst.CppTokenKind)">
            <summary>
            Gets a boolean indicating whether this token kind is an identifier or keyword
            </summary>
            <param name="kind">The token kind</param>
            <returns><c>true</c> if the token is an identifier or keyword, <c>false</c> otherwise</returns>
        </member>
        <member name="M:CppAst.CppExtensions.GetDisplayName(CppAst.CppType)">
            <summary>
            Gets the display name of the specified type. If the type is <see cref="T:CppAst.ICppMember"/> it will
            only use the name provided by <see cref="P:CppAst.ICppMember.Name"/>
            </summary>
            <param name="type">The type</param>
            <returns>The display name</returns>
        </member>
        <member name="M:CppAst.CppExtensions.IsPublicExport(CppAst.CppAttribute)">
            <summary>
            Gets a boolean indicating whether the attribute is a dllexport or visibility("default")
            </summary>
            <param name="attribute">The attribute to check against</param>
            <returns><c>true</c> if the attribute is a dllexport or visibility("default")</returns>
        </member>
        <member name="M:CppAst.CppExtensions.IsPublicExport(CppAst.CppClass)">
            <summary>
            Gets a boolean indicating whether the function is a dllexport or visibility("default")
            </summary>
            <param name="cppClass">The class to check against</param>
            <returns><c>true</c> if the class is a dllexport or visibility("default")</returns>
        </member>
        <member name="M:CppAst.CppExtensions.IsPublicExport(CppAst.CppFunction)">
            <summary>
            Gets a boolean indicating whether the function is a dllexport or visibility("default")
            </summary>
            <param name="function">The function to check against</param>
            <returns><c>true</c> if the function is a dllexport or visibility("default")</returns>
        </member>
        <member name="T:CppAst.CppField">
            <summary>
            A C++ field (of a struct/class) or global variable.
            </summary>
        </member>
        <member name="P:CppAst.CppField.Visibility">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppField.StorageQualifier">
            <summary>
            Gets or sets the storage qualifier of this field/variable.
            </summary>
        </member>
        <member name="P:CppAst.CppField.Attributes">
            <summary>
            Gets attached attributes. Might be null.
            </summary>
        </member>
        <member name="P:CppAst.CppField.Type">
            <summary>
            Gets the type of this field/variable.
            </summary>
        </member>
        <member name="P:CppAst.CppField.Name">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppField.IsAnonymous">
            <summary>
            Gets or sets a boolean indicating if this field was created from an anonymous type
            </summary>
        </member>
        <member name="P:CppAst.CppField.InitValue">
            <summary>
            Gets the associated init value (either an integer or a string...)
            </summary>
        </member>
        <member name="P:CppAst.CppField.InitExpression">
            <summary>
            Gets the associated init value as an expression.
            </summary>
        </member>
        <member name="P:CppAst.CppField.IsBitField">
            <summary>
            Gets or sets a boolean indicating that this field is a bit field. See <see cref="P:CppAst.CppField.BitFieldWidth"/> to get the width of this field if <see cref="P:CppAst.CppField.IsBitField"/> is <c>true</c>
            </summary>
        </member>
        <member name="P:CppAst.CppField.BitFieldWidth">
            <summary>
            Gets or sets the number of bits for this bit field. Only valid if <see cref="P:CppAst.CppField.IsBitField"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:CppAst.CppField.Offset">
            <summary>
            Gets or sets the offset of the field in bytes.
            </summary>
        </member>
        <member name="M:CppAst.CppField.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppFunction">
            <summary>
            A C++ function/method declaration.
            </summary>
        </member>
        <member name="M:CppAst.CppFunction.#ctor(System.String)">
            <summary>
            Creates a new instance of a function/method with the specified name.
            </summary>
            <param name="name">Name of this function/method.</param>
        </member>
        <member name="P:CppAst.CppFunction.Visibility">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppFunction.CallingConvention">
            <summary>
            Gets or sets the calling convention.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.Attributes">
            <summary>
            Gets the attached attributes.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.StorageQualifier">
            <summary>
            Gets or sets the storage qualifier.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.LinkageKind">
            <summary>
            Gets or sets the linkage kind
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.IsConstructor">
            <summary>
            Gets or sets a boolean indicating whether this method is a constructor method.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.IsDestructor">
            <summary>
            Gets or sets a boolean indicating whether this method is a destructor method.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.Name">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppFunction.Parameters">
            <summary>
            Gets a list of the parameters.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.Flags">
            <summary>
            Gets or sets the flags of this function.
            </summary>
        </member>
        <member name="P:CppAst.CppFunction.TemplateParameters">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunction.ToString">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunction.Children">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppFunctionFlags">
            <summary>
            Flags attached to a <see cref="T:CppAst.CppFunction"/>
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Const">
            <summary>
            The function is `const`
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Defaulted">
            <summary>
            The method is defaulted.
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Pure">
            <summary>
            The method is pure (`= 0`)
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Virtual">
            <summary>
            The method is declared `virtual`.
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Method">
            <summary>
            This is a C++ method
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Inline">
            <summary>
            This is a C++ function or method with inline attribute
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Constructor">
            <summary>
            This is a C++ constructor
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Destructor">
            <summary>
            This is a C++ destructor
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Variadic">
            <summary>
            This is a variadic function (has `...` parameter)
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.FunctionTemplate">
            <summary>
            This is a function template (has template params in function)
            </summary>
        </member>
        <member name="F:CppAst.CppFunctionFlags.Deleted">
            <summary>
            This is a deleted function
            </summary>
        </member>
        <member name="T:CppAst.CppFunctionType">
            <summary>
            A C++ function type (e.g `void (*)(int arg1, int arg2)`)
            </summary>
        </member>
        <member name="M:CppAst.CppFunctionType.#ctor(CppAst.CppType)">
            <summary>
            Constructor of a function type.
            </summary>
            <param name="returnType">Return type of this function type.</param>
        </member>
        <member name="P:CppAst.CppFunctionType.CallingConvention">
            <summary>
            Gets or sets the calling convention of this function type.
            </summary>
        </member>
        <member name="P:CppAst.CppFunctionType.ReturnType">
            <summary>
            Gets or sets the return type of this function type.
            </summary>
        </member>
        <member name="P:CppAst.CppFunctionType.Parameters">
            <summary>
            Gets a list of the parameters.
            </summary>
        </member>
        <member name="P:CppAst.CppFunctionType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunctionType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunctionType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunctionType.Children">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunctionType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppFunctionType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppGlobalDeclarationContainer">
            <summary>
            A base Cpp container for macros, classes, fields, functions, enums, typesdefs.
            </summary>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.#ctor">
            <summary>
            Create a new instance of this container.
            </summary>
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Macros">
            <summary>
            Gets the macros defines for this container.
            </summary>
            <remarks>
            Macros are only available if <see cref="P:CppAst.CppParserOptions.ParseMacros"/> is <c>true</c>
            </remarks>
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Fields">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Functions">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Enums">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Classes">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Typedefs">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Namespaces">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppGlobalDeclarationContainer.Attributes">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.Children">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByName(System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by name declared directly by this container.
            </summary>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByFullName(System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by full name(such as gbf::math::Vector3).
            </summary>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByFullName``1(System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by full name(such as gbf::math::Vector3).
            </summary>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByName(CppAst.ICppContainer,System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by name declared within the specified container.
            </summary>
            <param name="container">The container to search for the element by name</param>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindListByName(CppAst.ICppContainer,System.String)">
            <summary>
            Find a list of <see cref="T:CppAst.CppElement"/> matching name (overloads) declared within the specified container.
            </summary>
            <param name="container">The container to search for the element by name</param>
            <param name="name">Name of the element to find</param>
            <returns>A list of CppElement found or empty enumeration if not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByName``1(System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by name and type declared directly by this container.
            </summary>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.FindByName``1(CppAst.ICppContainer,System.String)">
            <summary>
            Find a <see cref="T:CppAst.CppElement"/> by name and type declared within the specified container.
            </summary>
            <param name="container">The container to search for the element by name</param>
            <param name="name">Name of the element to find</param>
            <returns>The CppElement found or null if not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CppAst.CppGlobalDeclarationContainer.ClearCacheByName">
            <summary>
            Clear the cache used by all <see cref="M:CppAst.CppGlobalDeclarationContainer.FindByName(System.String)"/> functions.
            </summary>
            <remarks>
            Used this method when new elements are added to this instance.
            </remarks>
        </member>
        <member name="M:CppAst.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppLinkageKind">
            <summary>
            Type of linkage.
            </summary>
        </member>
        <member name="T:CppAst.CppMacro">
            <summary>
            A C++ Macro, only valid if the parser is initialized with <see cref="P:CppAst.CppParserOptions.ParseMacros"/>
            </summary>
        </member>
        <member name="M:CppAst.CppMacro.#ctor(System.String)">
            <summary>
            Creates a new instance of a macro.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:CppAst.CppMacro.Name">
            <summary>
            Gets or sets the name of the macro.
            </summary>
        </member>
        <member name="P:CppAst.CppMacro.Parameters">
            <summary>
            Gets or sets the parameters of this macro (e.g `param1` and `param2` in `#define MY_MACRO(param1, param2)`)
            </summary>
        </member>
        <member name="P:CppAst.CppMacro.Tokens">
            <summary>
            Gets or sets the tokens of the value of the macro. The full string of the tokens is accessible via the <see cref="P:CppAst.CppMacro.Value"/> property.
            </summary>
            <remarks>
            If tokens are updated, you need to call <see cref="M:CppAst.CppMacro.UpdateValueFromTokens"/>
            </remarks>
        </member>
        <member name="P:CppAst.CppMacro.Value">
            <summary>
            Gets a textual representation of the token values of this macro.
            </summary>
        </member>
        <member name="M:CppAst.CppMacro.UpdateValueFromTokens">
            <summary>
            Call this method to update the <see cref="P:CppAst.CppMacro.Value"/> property from the list of <see cref="P:CppAst.CppMacro.Tokens"/>
            </summary>
        </member>
        <member name="T:CppAst.CppModelBuilder">
            <summary>
            Internal class used to build the entire C++ model from the libclang representation.
            </summary>
        </member>
        <member name="T:CppAst.CppNamespace">
            <summary>
            Defines a C++ namespace. This is only one level of namespace (e.g `A` in `A::B::C`)
            </summary>
        </member>
        <member name="M:CppAst.CppNamespace.#ctor(System.String)">
            <summary>
            Creates a namespace with the specified name.
            </summary>
            <param name="name">Name of the namespace.</param>
        </member>
        <member name="P:CppAst.CppNamespace.Name">
            <summary>
            Name of the namespace.
            </summary>
        </member>
        <member name="P:CppAst.CppNamespace.IsInlineNamespace">
            <summary>
            Is the namespace inline or not(such as std::__1::vector).
            </summary>
        </member>
        <member name="P:CppAst.CppNamespace.Fields">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Functions">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Enums">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Classes">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Typedefs">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Namespaces">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppNamespace.Attributes">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppParameter">
            <summary>
            A C++ function parameter.
            </summary>
        </member>
        <member name="M:CppAst.CppParameter.#ctor(CppAst.CppType,System.String)">
            <summary>
            Creates a new instance of a C++ function parameter.
            </summary>
            <param name="type">Type of the parameter.</param>
            <param name="name">Name of the parameter</param>
        </member>
        <member name="P:CppAst.CppParameter.Type">
            <summary>
            Gets the type of this parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppParameter.Name">
            <summary>
            Gets the name of this parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppParameter.InitValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:CppAst.CppParameter.InitExpression">
            <summary>
            Gets or sets the default value as an expression.
            </summary>
        </member>
        <member name="T:CppAst.CppParser">
            <summary>
            C/C++ Parser entry point functions.
            </summary>
        </member>
        <member name="M:CppAst.CppParser.Parse(System.String,CppAst.CppParserOptions,System.String)">
            <summary>
            Parse the specified C++ text in-memory.
            </summary>
            <param name="cppText">A string with a C/C++ text</param>
            <param name="options">Options used for parsing this file (e.g include folders...)</param>
            <param name="cppFilename">Optional path to a file only used for reporting errors. Default is 'content'</param>
            <returns>The result of the compilation</returns>
        </member>
        <member name="M:CppAst.CppParser.ParseFile(System.String,CppAst.CppParserOptions)">
            <summary>
            Parse the specified single file.
            </summary>
            <param name="cppFilename">A path to a C/C++ file on the disk to parse</param>
            <param name="options">Options used for parsing this file (e.g include folders...)</param>
            <returns>The result of the compilation</returns>
        </member>
        <member name="M:CppAst.CppParser.ParseFiles(System.Collections.Generic.List{System.String},CppAst.CppParserOptions)">
            <summary>
            Parse the specified single file.
            </summary>
            <param name="cppFilenameList">A list of path to C/C++ header files on the disk to parse</param>
            <param name="options">Options used for parsing this file (e.g include folders...)</param>
            <returns>The result of the compilation</returns>
        </member>
        <member name="M:CppAst.CppParser.ParseInternal(System.Collections.Generic.List{CppAst.CppParser.CppFileOrString},CppAst.CppParserOptions)">
            <summary>
            Private method parsing file or content.
            </summary>
            <param name="cppFiles">A list of path to C/C++ header files on the disk to parse</param>
            <param name="options">Options used for parsing this file (e.g include folders...)</param>
            <returns>The result of the compilation</returns>
        </member>
        <member name="T:CppAst.CppParserOptions">
            <summary>
            Defines the options used by the <see cref="T:CppAst.CppParser"/>
            </summary>
        </member>
        <member name="M:CppAst.CppParserOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.IncludeFolders">
            <summary>
            List of the include folders.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.SystemIncludeFolders">
            <summary>
            List of the system include folders.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.Defines">
            <summary>
            List of the defines.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.AdditionalArguments">
            <summary>
            List of the additional arguments passed directly to the C++ Clang compiler.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseAsCpp">
            <summary>
            Gets or sets a boolean indicating whether the files will be parser as C++. Default is <c>true</c>. Otherwise parse as C.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseComments">
            <summary>
            Gets or sets a boolean indicating whether to parser non-Doxygen comments in addition to Doxygen comments. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseMacros">
            <summary>
            Gets or sets a boolean indicating whether to parse macros. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.AutoSquashTypedef">
            <summary>
            Gets or sets a boolean indicating whether un-named enum/struct referenced by a typedef will be renamed directly to the typedef name. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseSystemIncludes">
            <summary>
            Gets or sets a boolean indicating whether to parse System Include headers. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseTokenAttributes">
            <summary>
            Gets or sets a boolean indicating whether to parse meta attributes. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.ParseCommentAttribute">
            <summary>
            Gets or sets a boolean indicating whether to parse comment attributes. Default is <c>false</c>
            </summary>
        </member>
        <member name="M:CppAst.CppParserOptions.EnableMacros">
            <summary>
            Sets <see cref="P:CppAst.CppParserOptions.ParseMacros"/> to <c>true</c> and return this instance.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="P:CppAst.CppParserOptions.TargetCpu">
            <summary>
            Cpu Clang target. Default is <see cref="F:CppAst.CppTargetCpu.X86"/>
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.TargetCpuSub">
            <summary>
            Cpu sub Clang target. Default is ""
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.TargetVendor">
            <summary>
            Vendor Clang target. Default is "pc"
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.TargetSystem">
            <summary>
            System Clang target. Default is "windows"
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.TargetAbi">
            <summary>
            Abi Clang target. Default is ""
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.PreHeaderText">
            <summary>
            Gets or sets a C/C++ pre-header included before the files/text to parse
            </summary>
        </member>
        <member name="P:CppAst.CppParserOptions.PostHeaderText">
            <summary>
            Gets or sets a C/C++ post-header included after the files/text to parse
            </summary>
        </member>
        <member name="M:CppAst.CppParserOptions.Clone">
            <summary>
            Clone this instance.
            </summary>
            <returns>Return a copy of this options.</returns>
        </member>
        <member name="M:CppAst.CppParserOptions.ConfigureForWindowsMsvc(CppAst.CppTargetCpu,CppAst.CppVisualStudioVersion)">
            <summary>
            Configure this instance with Windows and MSVC.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="T:CppAst.CppPointerType">
            <summary>
            A C++ pointer type (e.g `int*`)
            </summary>
        </member>
        <member name="M:CppAst.CppPointerType.#ctor(CppAst.CppType)">
            <summary>
            Constructor of a pointer type.
            </summary>
            <param name="elementType">The element type pointed to.</param>
        </member>
        <member name="M:CppAst.CppPointerType.ToString">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppPointerType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppPrimitiveKind">
            <summary>
            C++ primitive kinds used by <see cref="T:CppAst.CppPrimitiveType"/>
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Void">
            <summary>
            C++ `void`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Bool">
            <summary>
            C++ `bool`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.WChar">
            <summary>
            C++ `wchar`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Char">
            <summary>
            C++ `char`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Short">
            <summary>
            C++ `short`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Int">
            <summary>
            C++ `int`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.LongLong">
            <summary>
            C++ `long long` (64bits)
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.UnsignedChar">
            <summary>
            C++ `unsigned char`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.UnsignedShort">
            <summary>
            C++ `unsigned short`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.UnsignedInt">
            <summary>
            C++ `unsigned int`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.UnsignedLongLong">
            <summary>
            C++ `unsigned long long` (64 bits)
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Float">
            <summary>
            C++ `float`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.Double">
            <summary>
            C++ `double`
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveKind.LongDouble">
            <summary>
            C++ `long double`
            </summary>
        </member>
        <member name="T:CppAst.CppPrimitiveType">
            <summary>
            A C++ primitive type (e.g `int`, `void`, `bool`...)
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Void">
            <summary>
            Singleton instance of the `void` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Bool">
            <summary>
            Singleton instance of the `bool` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.WChar">
            <summary>
            Singleton instance of the `wchar` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Char">
            <summary>
            Singleton instance of the `char` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Short">
            <summary>
            Singleton instance of the `short` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Int">
            <summary>
            Singleton instance of the `int` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.LongLong">
            <summary>
            Singleton instance of the `long long` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.UnsignedChar">
            <summary>
            Singleton instance of the `unsigned char` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.UnsignedShort">
            <summary>
            Singleton instance of the `unsigned short` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.UnsignedInt">
            <summary>
            Singleton instance of the `unsigned int` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.UnsignedLongLong">
            <summary>
            Singleton instance of the `unsigned long long` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Float">
            <summary>
            Singleton instance of the `float` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.Double">
            <summary>
            Singleton instance of the `float` type.
            </summary>
        </member>
        <member name="F:CppAst.CppPrimitiveType.LongDouble">
            <summary>
            Singleton instance of the `long double` type.
            </summary>
        </member>
        <member name="M:CppAst.CppPrimitiveType.#ctor(CppAst.CppPrimitiveKind)">
            <summary>
            Base constructor of a primitive
            </summary>
            <param name="kind"></param>
        </member>
        <member name="P:CppAst.CppPrimitiveType.Kind">
            <summary>
            The kind of primitive.
            </summary>
        </member>
        <member name="M:CppAst.CppPrimitiveType.ToString">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppPrimitiveType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppPrimitiveType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppPrimitiveType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppPrimitiveType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppQualifiedType">
            <summary>
            A C++ qualified type (e.g `const int`)
            </summary>
        </member>
        <member name="M:CppAst.CppQualifiedType.#ctor(CppAst.CppTypeQualifier,CppAst.CppType)">
            <summary>
            Constructor for a C++ qualified type.
            </summary>
            <param name="qualifier">The C++ qualified (e.g `const`)</param>
            <param name="elementType">The element type (e.g `int`)</param>
        </member>
        <member name="P:CppAst.CppQualifiedType.Qualifier">
            <summary>
            Gets the qualifier
            </summary>
        </member>
        <member name="M:CppAst.CppQualifiedType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppQualifiedType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppQualifiedType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppQualifiedType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppReferenceType">
            <summary>
            A C++ reference type (e.g `int&amp;`)
            </summary>
        </member>
        <member name="M:CppAst.CppReferenceType.#ctor(CppAst.CppType)">
            <summary>
            Constructor of a reference type.
            </summary>
            <param name="elementType">The element type referenced to.</param>
        </member>
        <member name="P:CppAst.CppReferenceType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppReferenceType.ToString">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppReferenceType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppSourceLocation">
            <summary>
            Defines a location within a source file.
            </summary>
        </member>
        <member name="M:CppAst.CppSourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor of a location within a source file.
            </summary>
            <param name="file">The file path</param>
            <param name="offset">The char offset from the beginning of the file.</param>
            <param name="line">The line (starting from 1)</param>
            <param name="column">The column (starting from 1)</param>
        </member>
        <member name="F:CppAst.CppSourceLocation.File">
            <summary>
            Gets or sets the file associated with this location.
            </summary>
        </member>
        <member name="F:CppAst.CppSourceLocation.Offset">
            <summary>
            Gets or sets the char offset from the beginning of the file.
            </summary>
        </member>
        <member name="F:CppAst.CppSourceLocation.Line">
            <summary>
            Gets or sets the line (start from 1) of this location.
            </summary>
        </member>
        <member name="F:CppAst.CppSourceLocation.Column">
            <summary>
            Gets or sets the column (start from 1) of this location.
            </summary>
        </member>
        <member name="M:CppAst.CppSourceLocation.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppSourceSpan">
            <summary>
            A range of source location.
            </summary>
        </member>
        <member name="M:CppAst.CppSourceSpan.#ctor(CppAst.CppSourceLocation,CppAst.CppSourceLocation)">
            <summary>
            Constructor of a range of source location.
            </summary>
            <param name="start">Start of the range</param>
            <param name="end">End of the range</param>
        </member>
        <member name="F:CppAst.CppSourceSpan.Start">
            <summary>
            Gets or sets the beginning of the range source
            </summary>
        </member>
        <member name="F:CppAst.CppSourceSpan.End">
            <summary>
            Gets or sets the end of the range source
            </summary>
        </member>
        <member name="M:CppAst.CppSourceSpan.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppStorageQualifier">
            <summary>
            Defines the type of storage.
            </summary>
        </member>
        <member name="F:CppAst.CppStorageQualifier.None">
            <summary>
            No storage defined.
            </summary>
        </member>
        <member name="F:CppAst.CppStorageQualifier.Extern">
            <summary>
            Extern storage
            </summary>
        </member>
        <member name="F:CppAst.CppStorageQualifier.Static">
            <summary>
            Static storage.
            </summary>
        </member>
        <member name="T:CppAst.CppTargetCpu">
            <summary>
            Defines the target CPU used to compile a header file.
            </summary>
        </member>
        <member name="F:CppAst.CppTargetCpu.X86">
            <summary>
            The x86 CPU family (32bit)
            </summary>
        </member>
        <member name="F:CppAst.CppTargetCpu.X86_64">
            <summary>
            The X86_64 CPU family (64bit)
            </summary>
        </member>
        <member name="F:CppAst.CppTargetCpu.ARM">
            <summary>
            The ARM CPU family (32bit)
            </summary>
        </member>
        <member name="F:CppAst.CppTargetCpu.ARM64">
            <summary>
            The ARM 64 CPU family (64bit)
            </summary>
        </member>
        <member name="T:CppAst.CppTemplateArgument">
            <summary>
            For c++ specialized template argument
            </summary>
        </member>
        <member name="P:CppAst.CppTemplateArgument.SourceParam">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:CppAst.CppTemplateArgument.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateArgument.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateArgument.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateArgument.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateArgument.ToString">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppTemplateArgumentKind">
            <summary>
            Type of a template argument
            </summary>
        </member>
        <member name="T:CppAst.CppTemplateKind">
            <summary>
            Type of a template
            </summary>
        </member>
        <member name="F:CppAst.CppTemplateKind.NormalClass">
            <summary>
            not a template class, just a normal class
            </summary>
        </member>
        <member name="F:CppAst.CppTemplateKind.TemplateClass">
            <summary>
            A class template
            </summary>
        </member>
        <member name="F:CppAst.CppTemplateKind.PartialTemplateClass">
            <summary>
            A partial template class
            </summary>
        </member>
        <member name="F:CppAst.CppTemplateKind.TemplateSpecializedClass">
            <summary>
            A class with full template specialized
            </summary>
        </member>
        <member name="T:CppAst.CppTemplateParameterNonType">
            <summary>
            A C++ template parameter type.
            </summary>
        </member>
        <member name="M:CppAst.CppTemplateParameterNonType.#ctor(System.String,CppAst.CppType)">
            <summary>
            Constructor of this none type template parameter type.
            </summary>
            <param name="name"></param>
            <param name="templateNonType"></param>
        </member>
        <member name="P:CppAst.CppTemplateParameterNonType.Name">
            <summary>
            Name of the template parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppTemplateParameterNonType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterNonType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterNonType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterNonType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterNonType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppTemplateParameterType">
            <summary>
            A C++ template parameter type.
            </summary>
        </member>
        <member name="M:CppAst.CppTemplateParameterType.#ctor(System.String)">
            <summary>
            Constructor of this template parameter type.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:CppAst.CppTemplateParameterType.Name">
            <summary>
            Name of the template parameter.
            </summary>
        </member>
        <member name="P:CppAst.CppTemplateParameterType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTemplateParameterType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppToken">
            <summary>
            A C++ token used by <see cref="T:CppAst.CppMacro"/>.
            </summary>
        </member>
        <member name="M:CppAst.CppToken.#ctor(CppAst.CppTokenKind,System.String)">
            <summary>
            Creates a new instance of a C++ token.
            </summary>
            <param name="kind">Kind of this token</param>
            <param name="text">Text of this token</param>
        </member>
        <member name="P:CppAst.CppToken.Kind">
            <summary>
            Gets or sets the kind of this token.
            </summary>
        </member>
        <member name="P:CppAst.CppToken.Text">
            <summary>
            Gets or sets the text of this token.
            </summary>
        </member>
        <member name="M:CppAst.CppToken.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppTokenKind">
            <summary>
            Kind of a <see cref="T:CppAst.CppToken"/> used by <see cref="T:CppAst.CppMacro"/>
            </summary>
        </member>
        <member name="F:CppAst.CppTokenKind.Punctuation">
            <summary>
            A punctuation token (e.g `=`)
            </summary>
        </member>
        <member name="F:CppAst.CppTokenKind.Keyword">
            <summary>
            A keyword token (e.g `for`)
            </summary>
        </member>
        <member name="F:CppAst.CppTokenKind.Identifier">
            <summary>
            An identifier token (e.g `my_variable`)
            </summary>
        </member>
        <member name="F:CppAst.CppTokenKind.Literal">
            <summary>
            A literal token (e.g `15` or `"my string"`)
            </summary>
        </member>
        <member name="F:CppAst.CppTokenKind.Comment">
            <summary>
            A comment token
            </summary>
        </member>
        <member name="T:CppAst.CppTokenUtil.TokenIterator">
            <summary>
            Internal class to iterate on tokens
            </summary>
        </member>
        <member name="T:CppAst.CppTokenUtil.Tokenizer">
            <summary>
            Internal class to tokenize
            </summary>
        </member>
        <member name="T:CppAst.CppType">
            <summary>
            Base class for C++ types.
            </summary>
        </member>
        <member name="M:CppAst.CppType.#ctor(CppAst.CppTypeKind)">
            <summary>
            Constructor with the specified type kind.
            </summary>
            <param name="typeKind"></param>
        </member>
        <member name="P:CppAst.CppType.TypeKind">
            <summary>
            Gets the <see cref="T:CppAst.CppTypeKind"/> of this instance.
            </summary>
        </member>
        <member name="M:CppAst.CppType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppType.GetCanonicalType">
            <summary>
            Gets the canonical type of this type instance.
            </summary>
            <returns>A canonical type of this type instance</returns>
        </member>
        <member name="P:CppAst.CppType.FullName">
            <summary>
            We can use this name in exporter to use this type.
            </summary>
        </member>
        <member name="T:CppAst.CppTypeDeclaration">
            <summary>
            Base class for a type declaration (<see cref="T:CppAst.CppClass"/>, <see cref="T:CppAst.CppEnum"/>, <see cref="T:CppAst.CppFunctionType"/> or <see cref="T:CppAst.CppTypedef"/>)
            </summary>
        </member>
        <member name="P:CppAst.CppTypeDeclaration.Comment">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypeDeclaration.Children">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppTypedef">
            <summary>
            A C++ typedef (e.g `typedef int XXX`)
            </summary>
        </member>
        <member name="M:CppAst.CppTypedef.#ctor(System.String,CppAst.CppType)">
            <summary>
            Creates a new instance of a typedef.
            </summary>
            <param name="name">Name of the typedef (e.g `XXX`)</param>
            <param name="type">Underlying type.</param>
        </member>
        <member name="P:CppAst.CppTypedef.Visibility">
            <summary>
            Visibility of this element.
            </summary>
        </member>
        <member name="P:CppAst.CppTypedef.Name">
            <summary>
            Gets or sets the name of this type.
            </summary>
        </member>
        <member name="P:CppAst.CppTypedef.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypedef.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypedef.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypedef.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypedef.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppTypeKind">
            <summary>
            Kinds of a C++ type (e.g primitive, pointer...)
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Primitive">
            <summary>
            A primitive type (e.g `int`, `short`, `double`...)
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Pointer">
            <summary>
            A Pointer type (e.g `int*`)
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Reference">
            <summary>
            A reference type (e.g `int&amp;`)
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Array">
            <summary>
            An array type (e.g int[5])
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Qualified">
            <summary>
            A qualified type (e.g const int)
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Function">
            <summary>
            A function type
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Typedef">
            <summary>
            A typedef
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.StructOrClass">
            <summary>
            A struct or a class.
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Enum">
            <summary>
            An standard or scoped enum
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.TemplateParameterType">
            <summary>
            A template parameter type.
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.TemplateParameterNonType">
            <summary>
            A none type template parameter type.
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.TemplateArgumentType">
            <summary>
            A template specialized argument type.
            </summary>
        </member>
        <member name="F:CppAst.CppTypeKind.Unexposed">
            <summary>
            An unexposed type.
            </summary>
        </member>
        <member name="T:CppAst.CppTypeQualifier">
            <summary>
            Qualifiers for a <see cref="T:CppAst.CppQualifiedType"/>
            </summary>
        </member>
        <member name="F:CppAst.CppTypeQualifier.Const">
            <summary>
            The type is `const`
            </summary>
        </member>
        <member name="F:CppAst.CppTypeQualifier.Volatile">
            <summary>
            The type is `volatile`
            </summary>
        </member>
        <member name="T:CppAst.CppTypeWithElementType">
            <summary>
            Base class for a type using an element type.
            </summary>
        </member>
        <member name="P:CppAst.CppTypeWithElementType.SizeOf">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypeWithElementType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppTypeWithElementType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppUnexposedType">
            <summary>
            A type not fully/correctly exposed by the C++ parser.
            </summary>
            <remarks>
            Template parameter type instance are actually exposed with this type.
            </remarks>
        </member>
        <member name="M:CppAst.CppUnexposedType.#ctor(System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="name">Fullname of the unexposed type</param>
        </member>
        <member name="P:CppAst.CppUnexposedType.Name">
            <summary>
            Full name of the unexposed type
            </summary>
        </member>
        <member name="P:CppAst.CppUnexposedType.SizeOf">
            <inheritdoc />
        </member>
        <member name="P:CppAst.CppUnexposedType.TemplateParameters">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppUnexposedType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppUnexposedType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppUnexposedType.GetCanonicalType">
            <inheritdoc />
        </member>
        <member name="M:CppAst.CppUnexposedType.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppValue">
            <summary>
            A C++ default value used to initialize <see cref="T:CppAst.CppParameter"/>
            </summary>
        </member>
        <member name="M:CppAst.CppValue.#ctor(System.Object)">
            <summary>
            A default C++ value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:CppAst.CppValue.Value">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:CppAst.CppValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:CppAst.CppVisibility">
            <summary>
            Gets the visibility of a C++ element.
            </summary>
        </member>
        <member name="F:CppAst.CppVisibility.Default">
            <summary>
            Default visibility is undefined or not relevant.
            </summary>
        </member>
        <member name="F:CppAst.CppVisibility.Public">
            <summary>
            `public` visibility
            </summary>
        </member>
        <member name="F:CppAst.CppVisibility.Protected">
            <summary>
            `protected` visibility
            </summary>
        </member>
        <member name="F:CppAst.CppVisibility.Private">
            <summary>
            `private` visibility
            </summary>
        </member>
        <member name="T:CppAst.CppVisualStudioVersion">
            <summary>
            Enumeration used to define the VS version used when parsing. Used via <see cref="M:CppAst.CppParserOptions.ConfigureForWindowsMsvc(CppAst.CppTargetCpu,CppAst.CppVisualStudioVersion)"/>
            </summary>
            <remarks>
            From https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=vs-2019
            </remarks>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS6">
            <summary>
            Visual Studio 6.0
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VSNET2002">
            <summary>
            Visual Studio .NET 2002 (7.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VSNET2003">
            <summary>
            Visual Studio .NET 2003 (7.1)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2005">
            <summary>
            Visual Studio 2005 (8.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2008">
            <summary>
            Visual Studio 2008 (9.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2010">
            <summary>
            Visual Studio 2010 (10.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2012">
            <summary>
            Visual Studio 2012 (11.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2013">
            <summary>
            Visual Studio 2013 (12.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2015">
            <summary>
            Visual Studio 2015 (14.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_0">
            <summary>
            Visual Studio 2017 RTW (15.0)
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_3">
            <summary>
            Visual Studio 2017 version 15.3
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_5">
            <summary>
            Visual Studio 2017 version 15.5
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_6">
            <summary>
            Visual Studio 2017 version 15.6
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_7">
            <summary>
            Visual Studio 2017 version 15.7
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_8">
            <summary>
            Visual Studio 2017 version 15.8
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2017_15_9">
            <summary>
            Visual Studio 2017 version 15.9
            </summary>
        </member>
        <member name="F:CppAst.CppVisualStudioVersion.VS2019">
            <summary>
            Visual Studio 2019 RTW (16.0)
            </summary>
        </member>
        <member name="T:CppAst.ICppAttributeContainer">
            <summary>
            Base interface for all with attribute element.
            </summary>
        </member>
        <member name="P:CppAst.ICppAttributeContainer.Attributes">
            <summary>
            Gets the attributes from element.
            </summary>
        </member>
        <member name="T:CppAst.ICppContainer">
            <summary>
            Base tag interface used to describe a container of <see cref="T:CppAst.CppElement"/>
            </summary>
        </member>
        <member name="M:CppAst.ICppContainer.Children">
            <summary>
            Gets of declaration from this container.
            </summary>
            <returns>A list of Cpp declaration</returns>
        </member>
        <member name="T:CppAst.ICppDeclaration">
            <summary>
            Base interface for all Cpp declaration.
            </summary>
        </member>
        <member name="P:CppAst.ICppDeclaration.Comment">
            <summary>
            Gets or sets the comment attached to this element. Might be null.
            </summary>
        </member>
        <member name="T:CppAst.ICppDeclarationContainer">
            <summary>
            Base interface of a <see cref="T:CppAst.ICppContainer"/> containing fields, functions, enums, classes, typedefs.
            </summary>
            <seealso cref="T:CppAst.CppClass"/>
        </member>
        <member name="P:CppAst.ICppDeclarationContainer.Fields">
            <summary>
            Gets the fields/variables.
            </summary>
        </member>
        <member name="P:CppAst.ICppDeclarationContainer.Functions">
            <summary>
            Gets the functions/methods.
            </summary>
        </member>
        <member name="P:CppAst.ICppDeclarationContainer.Enums">
            <summary>
            Gets the enums.
            </summary>
        </member>
        <member name="P:CppAst.ICppDeclarationContainer.Classes">
            <summary>
            Gets the classes, structs.
            </summary>
        </member>
        <member name="P:CppAst.ICppDeclarationContainer.Typedefs">
            <summary>
            Gets the typedefs.
            </summary>
        </member>
        <member name="T:CppAst.ICppElement">
            <summary>
            Base interface of for <see cref="T:CppAst.CppElement"/>
            </summary>
        </member>
        <member name="T:CppAst.ICppGlobalDeclarationContainer">
            <summary>
            A <see cref="T:CppAst.ICppContainer"/> that can contain also namespaces.
            </summary>
            <seealso cref="T:CppAst.CppNamespace"/>
            <seealso cref="T:CppAst.CppCompilation"/>
            <seealso cref="T:CppAst.CppGlobalDeclarationContainer"/>
        </member>
        <member name="P:CppAst.ICppGlobalDeclarationContainer.Namespaces">
            <summary>
            Gets the declared namespaces
            </summary>
        </member>
        <member name="T:CppAst.ICppMember">
            <summary>
            A C++ declaration that has a name
            </summary>
        </member>
        <member name="P:CppAst.ICppMember.Name">
            <summary>
            Name of this C++ declaration.
            </summary>
        </member>
        <member name="T:CppAst.ICppMemberWithVisibility">
            <summary>
            Interface of a <see cref="T:CppAst.ICppMember"/> with a <see cref="T:CppAst.CppVisibility"/>.
            </summary>
        </member>
        <member name="P:CppAst.ICppMemberWithVisibility.Visibility">
            <summary>
            Gets or sets the visibility of this element.
            </summary>
        </member>
        <member name="T:CppAst.ICppTemplateOwner">
            <summary>
            Base interface of a type/method declared with template parameters.
            </summary>
        </member>
        <member name="P:CppAst.ICppTemplateOwner.TemplateParameters">
            <summary>
            List of template parameters.
            </summary>
        </member>
    </members>
</doc>
